version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-infrastructure:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy infrastructure
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  destroy-frontend:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy Frontend
          when: on_fail
          command: |
            aws s3 rb s3://"${CIRCLE_WORKFLOW_ID:0:7}" --force 
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: "install frontend" 
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: project3udacity
          event: fail
          template: basic_fail_1
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: "install backend" 
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: backendend-build
  
  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm run test
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm run test

  audit-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
    
  audit-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
  
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/project/textfile.txt
      - run: cat ~/project/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/textfile.txt
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout

      - run: 
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run:
          name: Install tar utility
          command: yum install -y tar gzip
      
      - run: 
          name: update-inventory
          command: 
            cd ~/project/.circleci/ansible
            echo [all] > inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory.txt
            ls ~/project/.circleci/ansible/

      - run: cat ~/project/.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-infrastructure
  
  configure-infrastructure:
    docker: 
      - image: python:3.9.16-alpine3.17
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: [2d:98:5a:0e:eb:d9:9f:f4:13:5c:26:f3:71:21:47:54]
      - attach_workspace:
          at: ~/
      - run:
          name: install ansible
          command: apk add --update ansible
      
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-infrastructure

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
    
  #   steps:
  #     - checkout

  #     - run: 
  #         name: Deploy frontend s3 bucket
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/frontend.yml \
  #           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #           --tags project=udapeople
  #     #- run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  #     - destroy-infrastructure
  #     - destroy-frontend
     



workflows:
  project-workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:   
      #       - build-backend
      # - audit-frontend:
      #     requires:
      #       - test-frontend
      # - audit-backend:
      #     requires:
      #       - test-backend
      # - get_last_deployment_id:
      #     requires: 
      #       - audit-frontend
      #       - audit-backend
      - deploy-infrastructure
          # requires:
          #   - get_last_deployment_id
      - configure-infrastructure:
          requires:
            - deploy-infrastructure