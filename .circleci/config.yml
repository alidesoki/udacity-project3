version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-infrastructure:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy infrastructure
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  destroy-frontend:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy Frontend
          when: on_fail
          command: |
            aws s3 rb s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force 
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/7izCfaHnuhQWnijewTYXYr/migration_<< parameters.Workflow_ID >>)
            echo "$SUCCESS"
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: "install frontend" 
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: project3udacity
          event: fail
          template: basic_fail_1
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: "install backend" 
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: backendend-build
  
  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm run test
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm run test

  audit-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
    
  audit-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
  
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/project/textfile.txt
      - run: cat ~/project/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/textfile.txt
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout

      - run: 
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run:
          name: Install tar utility
          command: yum install -y tar gzip
      - run: cat .circleci/ansible/inventory.txt

      - run: 
          name: update-inventory
          command: |
            cd .circleci/ansible
            echo [web] > inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory.txt
    
      - run: cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-infrastructure
  
  configure-infrastructure:
    docker:
      - image: python:3.11.2-alpine3.17
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: [d6:b4:4d:76:3c:1f:87:57:7a:ce:42:5f:20:14:ee:f7]
      
      - run:
          name: install ansiple
          command: |
            apk add --update ansible tar gzip curl
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-infrastructure
      #- destroy-frontend
  
  run-migrations: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl --insecure https://kvdb.io/7izCfaHnuhQWnijewTYXYr/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-infrastructure
      - destroy-frontend
  
  create-s3-bucket:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout

      - run: 
          name: Deploy frontend s3 bucket
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - destroy-infrastructure
      - destroy-frontend

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
            cat frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            echo build successful
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-infrastructure
      - destroy-frontend
     
  
  deploy-backend:
    docker:
      - image: python:3.11.2-alpine3.17
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: [d6:b4:4d:76:3c:1f:87:57:7a:ce:42:5f:20:14:ee:f7]
      - run:
          name: install ansiple
          command: |
            apk add --update ansible tar gzip curl nodejs npm
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install

      - run:
          name: deploy backend
          no_output_timeout: 30m
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-infrastructure
      - destroy-frontend
      - revert-migrations

  backend-smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run: . ./backendtest.sh
      - destroy-infrastructure
      - destroy-frontend
      - revert-migrations
      
  frontend-smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run: . ./frontendtest.sh
      - destroy-infrastructure
      - destroy-frontend
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install tar and gzip
          command: yum install tar gzip
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/7izCfaHnuhQWnijewTYXYr/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/7izCfaHnuhQWnijewTYXYr/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi         
        
      

workflows:
  project-workflow:
    jobs:
  #     - build-frontend
  #     - build-backend
  #     - test-frontend:
  #         requires:
  #           - build-frontend
  #     - test-backend:
  #         requires:   
  #           - build-backend
  #     - audit-frontend:
  #         requires:
  #           - test-frontend
  #     - audit-backend:
  #         requires:
  #           - test-backend
 
      # - deploy-infrastructure
        #  -requires:
        #     - audit-backend
        #     - audit-frontend
      # - create-s3-bucket
          # -requires:
          #   - audit-backend
          #   - audit-frontend
      # - configure-infrastructure:
      #     requires:
      #       - deploy-infrastructure
      # - run-migrations:
      #     requires:
      #       - configure-infrastructure
      # - deploy-frontend:
      #     requires:
      #       - create-s3-bucket
      #       - deploy-infrastructure
      # - deploy-backend:
      #     requires: 
      #       - run-migrations
      # - frontend-smoke-test:
      #     requires:
      #       - deploy-frontend
      # - backend-smoke-test:
      #     requires:
      #       - deploy-backend
      - cloudfront-update
      #     requires:
      #       - frontend-smoke-test
      #       - backend-smoke-test
      - cleanup:
          requires:
            - cloudfront-update