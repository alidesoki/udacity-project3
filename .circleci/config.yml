version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  destroy-infrastructure:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy infrastructure
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
  
  destroy-frontend:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy Frontend
          when: on_fail
          command: |
            aws s3 rb s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force 
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
jobs: 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: "install frontend" 
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: project3udacity
          event: fail
          template: basic_fail_1
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: "install backend" 
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: backendend-build
  
  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm run test
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm run test

  audit-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
    
  audit-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --force
          npm audit --audit-level=critical
  
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/project/textfile.txt
      - run: cat ~/project/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/textfile.txt
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout

      - run: 
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run:
          name: Install tar utility
          command: yum install -y tar gzip
      - run: cat .circleci/ansible/inventory.txt

      - run: 
          name: update-inventory
          command: |
            cd .circleci/ansible
            echo [web] > inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> inventory.txt
    
      - run: cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-infrastructure
  
  configure-infrastructure:
    docker: 
      - image: mareimorsy/aws-node
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: [2d:98:5a:0e:eb:d9:9f:f4:13:5c:26:f3:71:21:47:54]
      - attach_workspace:
          at: ~/
      - run:
          name: install ansible
          command: sudo apt install -y ansible python3 tar gzip
      
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-infrastructure
  
  run-migrations: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl --insecure https://kvdb.io/7izCfaHnuhQWnijewTYXYr/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
      - destroy-infrastructure
      - destroy-frontend
  
  create-s3-bucket:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout

      - run: 
          name: Deploy frontend s3 bucket
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      #- run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - destroy-infrastructure
      - destroy-frontend

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            echo build successful
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-infrastructure
      - destroy-frontend
     
  deploy-backend:
    docker: 
      - image: mareimorsy/aws-node
    steps: 
      - checkout
      - add_ssh_keys:
          fingerprints: [2d:98:5a:0e:eb:d9:9f:f4:13:5c:26:f3:71:21:47:54]
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: install dependcies 
          command: apt install ansible python3 tar gzip
      
      - run:
          name: deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            
  backend-smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run: . ./backendtest.sh
          # export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
          # export API_URL="http://${BACKEND_IP}:3030"
          # echo "${API_URL}"
          # if curl "${API_URL}/api/status" | grep "ok"
          # then
          #     return 0
          # else
          #     return 1
          # fi
  frontend-smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run: . ./frontendtest.sh
          # URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
          # echo ${URL} 
          # if curl -s ${URL} | grep "Welcome"
          # then
          #     # Change this to 0 after the job fails
          #   return 1
          # else
          #   return 1
          # fi
      
      




workflows:
  project-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:   
            - build-backend
      - audit-frontend:
          requires:
            - test-frontend
      - audit-backend:
          requires:
            - test-backend
      - get_last_deployment_id:
          requires: 
            - audit-frontend
            - audit-backend
      - deploy-infrastructure:
          requires:
            - get_last_deployment_id
      - create-s3-bucket:
          requires:
            - get_last_deployment_id 
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires: 
            - run-migrations
      - frontend-smoke-test:
          requires:
            - deploy-frontend
      - backend-smoke-test:
          requires:
            - deploy-backend